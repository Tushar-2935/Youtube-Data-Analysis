# -*- coding: utf-8 -*-
"""YT Data Analysis Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ASHodqmSQa1JQqCy-nYTG9v88I8RaZZs
"""

pip install google-api-python-client

import pandas as pd
from googleapiclient.discovery import build
import seaborn as sns

api_key='AIzaSyDfBayKUxFKHMxMNek2yAsnrdKSDoAHMh0'
#Tech TFQ channel id
channel_ids=['UCnz-ZXXER4jOvuED5trXfEA',#TechTFQ
            'UCX6OQ3DkcsbYNE6H8uQQuVA',#MrBeast
            'UC-lHJZR3Gqxm24_Vd_AJ5Yw',#PewDiePie
            'UCpEhnqL0y41EpW2TvWAHD7Q',#SET INDIA
            'UCq-Fj5jknLsUf-MWSy4_brA'#TSeries
            ]

youtube = build('youtube','v3',developerKey=api_key)

"""Functions to get channel statistics"""

def get_channel_stats(youtube,channel_ids):
  all_data=[]
  request = youtube.channels().list(
      part='snippet,contentDetails,statistics',
      id=','.join(channel_ids))
  response = request.execute()
  for i in range(len(response['items'])):
    data=dict(Channel_name=response['items'][i]['snippet']['title'],
            Subscribers=response['items'][i]['statistics']['subscriberCount'],
            Views=response['items'][i]['statistics']['viewCount'],
            Total_videos=response['items'][i]['statistics']['videoCount'],
            playlist_id=response['items'][i]['contentDetails']['relatedPlaylists']['uploads'])
    all_data.append(data)
  return all_data

channel_statistics=get_channel_stats(youtube,channel_ids)

channel_data=pd.DataFrame(channel_statistics)

channel_data

channel_data.dtypes

channel_data['Subscribers']=pd.to_numeric(channel_data['Subscribers'])
channel_data['Views']=pd.to_numeric(channel_data['Views'])
channel_data['Total_videos']=pd.to_numeric(channel_data['Total_videos'])

channel_data.dtypes

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

sns.set(style='darkgrid')
sns.set(rc={'figure.figsize':(7,5)})
ax=sns.barplot(x='Channel_name',y='Subscribers',data=channel_data,palette=['red','blue','green','magenta','yellow'])
plt.title('Number of Subsribers')
plt.show()

"""Conclusion: MrBeast has the highest Subscribers

"""

ax=sns.barplot(x='Channel_name',y='Views',data=channel_data,palette=['red','blue','green','magenta','yellow'])
plt.title('Number of Views')
plt.show()

ax=sns.barplot(x='Channel_name',y='Total_videos',data=channel_data,palette=['red','blue','green','magenta','yellow'])
plt.title('Number of Views')
plt.show()

"""Function to get video ids"""

channel_data

playlist_id=channel_data.loc[channel_data['Channel_name']=='MrBeast','playlist_id'].iloc[0]

def get_video_ids(youtube,playlist_id):
  request = youtube.playlistItems().list(
      part='contentDetails',
      playlistId=playlist_id,
      maxResults=50)
  response=request.execute()
  video_ids=[]
  for i in range(len(response['items'])):
    video_ids.append(response['items'][i]['contentDetails']['videoId'])
  next_page_token=response.get('nextPageToken')
  more_pages=True
  while more_pages:
    if next_page_token is None:
      more_pages=False
    else:
      request = youtube.playlistItems().list(
        part='contentDetails',
        playlistId=playlist_id,
        maxResults=50,
        pageToken=next_page_token)
      response=request.execute()
      for i in range(len(response['items'])):
        video_ids.append(response['items'][i]['contentDetails']['videoId'])
      next_page_token=response.get('nextPageToken')
  return video_ids

video_ids=get_video_ids(youtube,playlist_id)

video_ids

"""Function to get video details"""

def get_video_details(youtube,video_ids):
  all_video_stats=[]
  for i in range(0,len(video_ids),50):
    request=youtube.videos().list(
        part='snippet,statistics',
        id=','.join(video_ids[i:i+50]))
    response=request.execute()
    for video in response['items']:
      video_stats=dict(Title=video['snippet']['title'],
                       Published_date=video['snippet']['publishedAt'],
                       Views=video['statistics']['viewCount'],
                       )
      if 'commentCount' in video['statistics']:
        video_stats['Comments']=video['statistics']['commentCount']
      else:
        video_stats['Comments']=0
      if 'dislikeCount' in video['statistics']:
        video_stats['Dislikes']=video['statistics']['dislikeCount']
      else:
        video_stats['Dislikes']=0
      if 'likeCount' in video['statistics']:
        video_stats['Likes']=video['statistics']['likeCount']
      else:
        video_stats['Likes']=0
      all_video_stats.append(video_stats)


  return all_video_stats

video_details=get_video_details(youtube,video_ids)

video_data=pd.DataFrame(video_details)

video_data

video_data.dtypes

video_data['Published_date']=pd.to_datetime(video_data['Published_date']).dt.date
video_data['Views']=pd.to_numeric(video_data['Views'])
video_data['Likes']=pd.to_numeric(video_data['Likes'])
video_data['Dislikes']=pd.to_numeric(video_data['Dislikes'])
video_data['Comments']=pd.to_numeric(video_data['Comments'])

video_data.dtypes

top10_videos=video_data.sort_values(by='Views',ascending=False)

top10_videos

ax1=sns.barplot(x='Views',y='Title',data=top10_videos[:5],palette='dark')
ax1.set(title='Top 5 videos based on views',xlabel='Views',ylabel='Title')
plt.show()

video_data['Month']=pd.to_datetime(video_data['Published_date']).dt.strftime('%b')

video_data

videos_per_month=video_data.groupby('Month',as_index=False).size()

videos_per_month

sort_order=['Jan','Feb','Mar','April','June','July','Aug','Sep','Oct','Nov','Dec']

videos_per_month.index=pd.CategoricalIndex(videos_per_month['Month'],categories=sort_order,ordered=True)

videos_per_month.sort_index()

ax2=sns.barplot(x='Month',y='size',data=videos_per_month,palette='rocket')
ax2.set(title='Number of videos uploaded per month',xlabel='Month',ylabel='Number of videos')
plt.show()

